Your full name:

Your email:

Type name: application
	
Subtype name: sarif+json
	
Required parameters: N/A
	
Optional parameters: N/A
	
Encoding considerations:
	
Security considerations:

	Producers and consumers of SARIF files should consider the following security-related
	issues. Some of these issues arise from the fact that SARIF files contain potentially
	sensitive information about software and software development environments. Since SARIF
	is a textual format with no provision for protecting sensitive information, SARIF should
	only be used in an environment that provides an appropriate level of security. For example,
	SARIF files might be stored on a file share with limited permissions, or transmitted
	by means of an encrypted protocol such as HTTPS.

	1) SARIF files contain results produced by static analysis tools. These results might
	describe security vulnerabilities, or other defects that should not be disclosed, in the
	software being analyzed.

	2) SARIF files contain URIs which specify the location of the files that were analyzed.
	If these URIs are absolute, they might disclose information about the system on which the
	analysis took place, such as the name of the engineer, for example: "file://C:/Users/MarySmith/src/ui/window.c".
	For this reason, URIs should be specified as relative references, for example: "ui/window.c".

	Even relative URIs might disclose sensitive information about the implementation of the software,
	for example, "encryption/sha1.c".

	3) SARIF defines a property run.originalBaseUriIds whose purpose is explicitly to provide
	the absolute URI (e.g., "file:/Users/MarySmith") with respect to which relative references
	such as "ui/window.c" are evaluated. This property might disclose sensitive information.

	4) SARIF provides an object named invocation which contains information about how the
	analysis tool was invoked. Many of its properties (for example, machine, account, and
	environmentVariables) disclose information about the machine on which the analysis took
	place.

	5) The URIs in a SARIF file might point to insecure resources such as malicious web sites.
	They might also contain executable code (for example, in a "javascript:" URI). SARIF
	producers should not emit such URIs. SARIF consumers should take care not to follow
	malicious links. In practice, this means that end users should not open SARIF files
	unless they trust the producer.

	6) User-visible messages in SARIF files can be expressed either in plain text or in a rich
	text format (by default, GitHub-flavored Markdown). Markdown can contain arbitrary HTML,
	which poses a security risk. SARIF producers should not emit HTML. SARIF consumers should
	sanitize the Markdown they receive (for example, by removing embedded HTML). SARIF consumers
	should process Markdown with a Markdown processor that allows HTML processing to be disabled,
	and that guards against stack overflows induced by maliciously constructed Markdown.

	7) SARIF defines an extensibility mechanism that allows SARIF producers to include arbitrary
	properties in a SARIF file (information that is not explicitly defined in the SARIF format).
	SARIF producers should not use this mechanism to define properties that contains executable code
	or script.
	
Interoperability considerations:
	
Published specification:
	
Applications that use this media type:
	
Fragment identifier considerations:
	
Additional information:
	
Deprecated alias names for this type: N/A
Magic number(s): N/A

File extension(s): .sarif

Macintosh file type code(s): N/A

Person & email address to contact for further information:

Intended usage:
(One of COMMON, LIMITED USE, or OBSOLETE.)

Restrictions on usage:
(Any restrictions on where the media type can be used go here.)

Author:

Change controller:

Provisional registration? (standards tree only): No

(Any other information that the author deems interesting may be
   added below this line.)
